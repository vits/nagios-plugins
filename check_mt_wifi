#! /usr/bin/perl -w

use POSIX;
use strict;
use lib "/usr/lib/nagios/plugins" ;
use utils qw($TIMEOUT %ERRORS &print_revision &support);

use Net::SNMP;
use Getopt::Long;
Getopt::Long::Configure('bundling');

my $PROGNAME = "check_mt_wifi";

sub print_help ();
sub usage ($);
sub print_usage ();
sub process_arguments ();

my $timeout = $TIMEOUT;
my $hostname;
my $port = 161;
my $snmp_version = 1;
my $maxmsgsize = 1472;
my $community = 'public';

my $levels;
my $critical_level;
my $warning_level;

my $status;
my $state = 'UNKNOWN';
my $answer = '';
my $session;
my $error;
my $response;
my %session_opts;

my $oid = '1.3.6.1.4.1.14988.1.1.1.';

# Just in case of problems, let's not hang Nagios
$SIG{'ALRM'} = sub {
    print ("ERROR: No snmp response from $hostname (alarm timeout)\n");
    exit $ERRORS{"UNKNOWN"};
};

#Option checking
$status = process_arguments();

if ($status != 0)
{
    print_help();
    exit $ERRORS{'OK'};
}

alarm($timeout);
($session, $error) = Net::SNMP->session(%session_opts);

if (!defined($session)) {
    $state='UNKNOWN';
    $answer=$error;
    print ("$state: $answer\n");
    exit $ERRORS{$state};
}

my $snmpkey;
my $snmpvalue;
my $wifikey;
my $wifi;
my $rawmac;
my $mac;
my $signal;
my $snr;
my $quality;
my $oidlen = length($oid);
my $wlanif;

my $clients = 0;
my $minsnr = 999;
my $maxsnr = 0;
my $avgsnr = 0;
my $sumsnr = 0;
my $avgquality = 0;
my $sumquality = 0;

$response = $session->get_table('1.3.6.1.2.1.2.2.1.2');

foreach $snmpkey (keys %{$response}) {
    my $name = $response->{$snmpkey};
    if ($name =~ m/wlan/) {
        $wlanif = substr($snmpkey, 20);
        last;
    }
}

$response = $session->get_table($oid);
my $noise = $response->{$oid.'3.1.9.'.$wlanif};

foreach $snmpkey (keys %{$response}) {
    if (substr($snmpkey, 0, $oidlen+6) eq $oid.'2.1.1.') {
        $rawmac = unpack("H*", $response->{$snmpkey});
        $mac = substr($rawmac,0,2) .':'. substr($rawmac,2,2) .':'. substr($rawmac,4,2) .':'. substr($rawmac,6,2) .':'. substr($rawmac,8,2) .':'. substr($rawmac,10,2);
        $wifikey = substr($snmpkey, $oidlen+6);
        $signal = $response->{$oid.'2.1.3.'.$wifikey};
        $snr = $signal - $noise;
        $quality = $signal / $noise * $snr;
        if ($snr < $minsnr) {
            $minsnr = $snr;
        }
        if ($snr > $maxsnr) {
            $maxsnr = $snr;
        }
        $sumsnr += $snr;
        $sumquality += $quality;
        $clients += 1;
        $answer .= sprintf("$mac: signal=$signal dBm; SNR=$snr; quality=%2.3f%%\n", $quality);
    }
}

if ($clients > 0) {
    $avgsnr = $sumsnr / $clients;
    $avgquality = $sumquality / $clients;
} else {
    $minsnr = 0;
}

$session->close;

alarm(0);

$state = 'OK';
my $levels_str = '';
if (defined $critical_level) {
    $levels_str = ";$critical_level";
    if ($noise >= $critical_level) {
        $state = 'CRITICAL';
    }
}
if (defined $warning_level) {
    $levels_str .= ";$warning_level";
    if ($noise >= $warning_level && $state ne 'CRITICAL') {
        $state = 'WARNING';
    }
}

print "$state - noise level $noise dBm | noise=$noise$levels_str clients=$clients ";
printf "minsnr=$minsnr maxsnr=$maxsnr avgsnr=%2.3f avgquality=%2.3f%%\n", $avgsnr, $avgquality;
print "$answer\n";

exit $ERRORS{$state};

sub print_usage() {
    printf "\n";
    printf "usage: \n";
    printf "check_mt_wifi -C <READCOMMUNITY> -H <HOSTNAME>\n";
    printf "\n";
}

sub print_help() {
    print_revision($PROGNAME, '1.0.0');
    print_usage();
    printf "\nUsage:\n";
    printf "   -H (--hostname)   Hostname to query - (required)\n";
    printf "   -C (--community)  SNMP read community (defaults to public)\n";
    printf "   -L (--levels)     Critical:warning noise levels\n";
}

sub process_arguments() {
    $status = GetOptions(
        "H=s" => \$hostname, "hostname=s" => \$hostname,
        "C=s" => \$community, "community=s" => \$community,
        "L=s" => \$levels, "levels=s" => \$levels
    );

    if (defined $levels) {
        my @levels = split(':', $levels);
        $critical_level = $levels[0];
        if (defined $levels[1]) {
            $warning_level = $levels[1];
        } else {
            $warning_level = $levels[0];
        }
    }

    %session_opts = (
       -hostname   => $hostname,
       -port       => $port,
       -version    => $snmp_version,
       -maxmsgsize => $maxmsgsize,
       -community  => $community,
       -translate  => [-octetstring => 0]
    );

    if ($status == 0) {
        print_help();
        exit $ERRORS{'OK'};
    }

    return $ERRORS{'OK'};
}